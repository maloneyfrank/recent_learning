* fluent python notes

** chapter one: the python data model
 
*** a pythonic card deck

 * collections.namedtuple() lets us construct a simple class with named attributes, no custom methods.
   
 * the underscore before the class variable name indicates that it is intended for internal used to the class. 

   
 #+begin_src python :results output :session fluent
   import collections

   Card = collections.namedtuple('Card', ['rank', 'suit'])

   class FrenchDeck:
       ranks = [str(n) for n in range(2,11)] + list('JQKA')
       suits  ='spades diamonds clubs hearts'.split()

       def __init__(self):
           self._cards = [Card(rank, suit) for suit in self.suits
                          for rank in self.ranks]

       def __len__(self):
           return len(self._cards)

       def __getitem__(self, position):
           return self._cards[position]

 #+end_src

 #+RESULTS:

 #+begin_src python :session fluent
   deck = FrenchDeck()
   len(deck)
 #+end_src

 #+RESULTS:
 : 52

  #+begin_src python  :session fluent
    deck[0]
  #+end_src

 #+RESULTS:
 : Card(rank='2', suit='spades')

 #+begin_src python :session fluent

   from random import choice
   choice(deck)

 #+end_src

 #+RESULTS:
 : Card(rank='J', suit='hearts')
 
 #+begin_src  python :session fluent
   deck[:3]
 #+end_src

 #+RESULTS:
 | Card | (rank= 2 suit= spades) | Card | (rank= 3 suit= spades) | Card | (rank= 4 suit= spades) |

 * Users don't need to remember special method names for standard operations.
 * Easier to benefit from the python standard library to avoid reinvention of the wheel.
   * E.g. automatically supporting slicing.

#+begin_src python :session fluent
  deck[12::13]
#+end_src

#+RESULTS:
| Card | (rank= A suit= spades) | Card | (rank= A suit= diamonds) | Card | (rank= A suit= clubs) | Card | (rank= A suit= hearts) |

#+begin_src python :session fluent
  for card in deck:
      print(card)
#+end_src

#+RESULTS:

 * By using the __getitem__ special method, our deck is automatically iterable.
 * If the collectio has no __contains__ method, the in operator does a sequential scan. - works because it is iterable.

 #+begin_src python :session fluent

   Card('Q', 'hearts') in deck

 #+end_src
 
 #+RESULTS:
 : True

  
 #+begin_src python :session fluent :results output

   suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)

   def spades_high(card):
       rank_value  = FrenchDeck.ranks.index(card.rank)
       return rank_value * len(suit_values) + suit_values[card.suit]

   for card in sorted(deck, key=spades_high):
       print(card)

 #+end_src

 #+RESULTS:
 #+begin_example
 Card(rank='2', suit='clubs')
 Card(rank='2', suit='diamonds')
 Card(rank='2', suit='hearts')
 Card(rank='2', suit='spades')
 Card(rank='3', suit='clubs')
 Card(rank='3', suit='diamonds')
 Card(rank='3', suit='hearts')
 Card(rank='3', suit='spades')
 Card(rank='4', suit='clubs')
 Card(rank='4', suit='diamonds')
 Card(rank='4', suit='hearts')
 Card(rank='4', suit='spades')
 Card(rank='5', suit='clubs')
 Card(rank='5', suit='diamonds')
 Card(rank='5', suit='hearts')
 Card(rank='5', suit='spades')
 Card(rank='6', suit='clubs')
 Card(rank='6', suit='diamonds')
 Card(rank='6', suit='hearts')
 Card(rank='6', suit='spades')
 Card(rank='7', suit='clubs')
 Card(rank='7', suit='diamonds')
 Card(rank='7', suit='hearts')
 Card(rank='7', suit='spades')
 Card(rank='8', suit='clubs')
 Card(rank='8', suit='diamonds')
 Card(rank='8', suit='hearts')
 Card(rank='8', suit='spades')
 Card(rank='9', suit='clubs')
 Card(rank='9', suit='diamonds')
 Card(rank='9', suit='hearts')
 Card(rank='9', suit='spades')
 Card(rank='10', suit='clubs')
 Card(rank='10', suit='diamonds')
 Card(rank='10', suit='hearts')
 Card(rank='10', suit='spades')
 Card(rank='J', suit='clubs')
 Card(rank='J', suit='diamonds')
 Card(rank='J', suit='hearts')
 Card(rank='J', suit='spades')
 Card(rank='Q', suit='clubs')
 Card(rank='Q', suit='diamonds')
 Card(rank='Q', suit='hearts')
 Card(rank='Q', suit='spades')
 Card(rank='K', suit='clubs')
 Card(rank='K', suit='diamonds')
 Card(rank='K', suit='hearts')
 Card(rank='K', suit='spades')
 Card(rank='A', suit='clubs')
 Card(rank='A', suit='diamonds')
 Card(rank='A', suit='hearts')
 Card(rank='A', suit='spades')
 #+end_example


 The first thing to know about special methods is that they are meant to be called by the Python interpreter, and not by you. You don’t write my_object.__len__(). You write len(my_object) and, if my_object is an instance of a user-defined class, then Python calls the __len__ method you implemented.

 
Normally, your code should not have many direct calls to special methods. Unless you are doing a lot of metaprogramming, you should be implementing special methods more often than invoking them explicitly. The only special method that is frequently called by user code directly is __init__ to invoke the initializer of the superclass in your own __init__ implementation.

*** Evaluating Numeric Types + more


#+begin_src  python :session fluent

  import math

  class Vector:
      
      def __init__(self, x=0, y=0):
          self.x = x
          self.y = y

      def __repr__(self):
          # !r calls the repr() instead of str() method of the self.x, self.y
          return f'Vector({self.x!r}, {self.y!r})'

      def __abs__(self):
          return math.hypot(self.x, self.y)

      def __bool__(self):
          return bool(abs(self))

      def __add__(self, other):
          x = self.x + other.x
          y = self.y + other.y

          return Vector(x,y)

      def __mul__(self, scalar):
          return Vector(self.x * scalar, self.y * scalar)

#+end_src

#+RESULTS:

As implemented, Example 1-2 allows multiplying a Vector by a number, but not a number by a Vector, which violates the commutative property of scalar multiplication. We will fix that with the special method __rmul__ in Chapter 16.

#+begin_src  python :session fluent

  v1 = Vector(3,4)
  v2 = Vector(2,3)

  v1+v2
#+end_src

#+RESULTS:
: Vector(5, 7)

Without a custom __repr__, Python’s console would display a Vector instance <Vector object at 0x10e100070>.

Note that the f-string in our __repr__ uses !r to get the standard representation of the attributes to be displayed. This is good practice, because it shows the crucial difference between Vector(1, 2) and Vector('1', '2')—the latter would not work in the context of this example, because the constructor’s arguments should be numbers, not str.

In contrast, __str__ is called by the str() built-in and implicitly used by the print function. It should return a string suitable for display to end users.

Sometimes same string returned by __repr__ is user-friendly, and you don’t need to code __str__ because the implementation inherited from the object class calls __repr__ as a fallback. Example 5-2 is one of several examples in this book with a custom __str__.

*** Boolean value of a custom type

By default, instances of user-defined classes are considered truthy, unless either __bool__ or __len__ is implemented. Basically, bool(x) calls x.__bool__() and uses the result. If __bool__ is not implemented, Python tries to invoke x.__len__(), and if that returns zero, bool returns False. Otherwise bool returns True.


#+begin_src python :session fluent

  abs(v1) # 5.0

  bool(v1) # True
  #+end_src

#+RESULTS:
: True

** chapter two: an array of sequences

These are the main topics this chapter will cover:

    List comprehensions and the basics of generator expressions

    Using tuples as records versus using tuples as immutable lists

    Sequence unpacking and sequence patterns

    Reading from slices and writing to slices
    
    Specialized sequence types, like arrays and queues


- Container Sequences
  - Can hold items of different types, including nested containers.
    - list, tuple, collections.deque.

- Flat sequences
  - Hold items of one simple type.
    - str, bytes, array.array

#+begin_src python :session fluent :results output

#+end_src

      
    
    
** chapter five data class builders

Python offers a few ways to build a simple class that is just a collection of fields, with little or no extra functionality. That pattern is known as a “data class”—and dataclasses is one of the packages that supports this pattern. This chapter covers three different class builders that you may use as shortcuts to write data classes:

 #+begin_src python :results output :session fluent
   from collections import namedtuple

   Coordinate = namedtuple('Coordinate', 'lat lon')

   issubclass(Coordinate, tuple) # True

   moscow = Coordinate(55.756, 37.617)

   print(moscow)
 #+end_src

 #+RESULTS:
 : Coordinate(lat=55.756, lon=37.617)

 #+begin_src python :results output :session fluent

   import typing

   Coordinate = typing.NamedTuple('Coordinate', [('lat', float), ('lon', float)])
   # or typing.NamedTuple('Coordinate', lat=float, lon=float)

   print(typing.get_type_hints(Coordinate))
 #+end_src

 #+RESULTS:
 : {'lat': <class 'float'>, 'lon': <class 'float'>}


  #+begin_src python :results output :session fluent
    from typing import NamedTuple

    class Coordinate(NamedTuple):
        lat: float
        lon: float

        def __str__(self):
            ns = 'N' if self.lat >= 0 else 'S'
            we = 'E' if self.lon >=0 else 'W'

            return f'{abs(self.lat):.1f}{ns}, {abs(self.lon):.1f}{we}'


    moscow = Coordinate(55.756, 37.617)
    japan = Coordinate(55.756, 37.617)


    print(moscow == japan)
 #+end_src

 #+RESULTS:
 : True


 #+Begin_src  python :results output :session fluent

   from dataclasses import dataclass

   @dataclass(frozen=True) # raises exception if value assigned to field after initialization
   class Coordinate:
       lat: float
       lon: float

       def __str__(self):
           ns = 'N' if self.lat >= 0 else 'S'
           we = 'E' if self.lon >= 0 else 'W'
           return f'{abs(self.lat):.1f}°{ns}, {abs(self.lon):.1f}°{we}'
    

 #+end_src



**** Classic NamedTuples
 #+begin_src python :results output :session fluent

   from collections import namedtuple

   City = namedtuple('City', 'name country population coordinates')
   tokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))

   print(tokyo.population)

   print(tokyo._asdict())
 #+end_src

 #+RESULTS:
 : 36.933
 : {'name': 'Tokyo', 'country': 'JP', 'population': 36.933, 'coordinates': (35.689722, 139.691667)}


**** Type Named Tuples

 #+begin_src python :results output :session fluent
   from typing import NamedTuple

   class Coordinate(NamedTuple):
       lat: float
       lon: float
       reference: str = 'WSG84'

 #+end_src
 

**** Variable annotation syntax:

#+begin_src python

  class DemoPlainClass:
        a: int # entry in __annotations__ but otherwise discrded, no attr a is created
        b: float = 1.1 # b is saved as an annotation and becomes attribute with value 1.1
        c = 'spam' # plain old attribute, not an annotation
        
  DemoPlainClass.__annotations__
        """

  When DPC is built with type NamedTuple, a is also an instance attribute
  """

#+end_src

**** More about @dataclass

#+begin_src python :session fluent :results output

  """

    @dataclass(*, init=True, repr=True, eq=True, order=False,
                unsafe_hash=False, frozen=False)
    """

  from dataclasses import dataclass, field
  from typing import ClassVar

  @dataclass
  class ClubMember:
      name: str
      guests: list[str] = field(default_factory=list) # ensures that each instance gets its own
      # blank list


  @dataclass                                                          
  class HackerClubMember(ClubMember):
      #all_handles = set() # not type cheker satisfactory
      all_handles: ClassVar[set[str]] = set()
      handle: str = ''

      def __post_init__(self):
          cls = self.__class__
          if self.handle == '':
              self.handle = self.name.split()[0]

          if self.handle in cls.all_handles:
              msg = f'handle {self.handle!r} already exists.'
              raise ValueError(msg)

          cls.all_handles.add(self.handle)


  leo  = HackerClubMember('Leo Jones')
  leo2 = HackerClubMember('Leo Rones', handle='leo2')
#+end_src

#+RESULTS:
: HackerClubMember(name='Leo Jones', guests=[], handle='Leo')
: HackerClubMember(name='Leo Rones', guests=[], handle='leo2')

Sometimes you may need to pass arguments to __init__ that are not instance fields. Such arguments are called init-only variables by the dataclasses documentation. To declare an argument like that, the dataclasses module provides the pseudotype InitVar, which uses the same syntax of typing.ClassVar. The example given in the documentation is a data class that has a field initialized from a database, and the database object must be passed to the constructor.

#+begin_src python

  @dataclass
  class C:
      i: int
      j: int
      database: InitVar[DatabaseType] = None

#+end_src


Note how the database attribute is declared. InitVar will prevent @dataclass from treating database as a regular field. It will not be set as an instance attribute, and the dataclasses.fields function will not list it. However, database will be one of the arguments that the generated __init__ will accept, and it will be also passed to __post_init__. If you write that method, you must add a corresponding argument to the method signature, as shown in Example 5-18.


**** Dublin Core Resource Record

#+begin_src  python :results output :session fluent

  from dataclasses import dataclass, field
  from typing import Optional
  from enum import Enum, auto
  from datetime import date

  class ResourceType(Enum):
      BOOK = auto()
      EBOOK = auto()
      VIDEO = auto()

  @dataclass
  class Resource:
      identifier: str
      title: str = '<untitled>'
      creators: list[str] = field(default_factory=list)
      date: Optional[date] = None
      description: str = ''
      language: str = ''
      subjects: list[str] = field(default_factory) = list

#+end_src



** chapter six: object references, mutability, recycling

#+begin_src python :session fluent :results output

  a = [1,2,3]
  b = a
  a.append(4)
  print(b)

#+end_src

#+RESULTS:
: [1, 2, 3, 4]

**** Identity, Equality, Aliases

#+begin_src python  :session fluent

  charles = {'name': 'Charles L. Dodgson', 'born': 1832}
  lewis = charles

  lewis is charles # True

  id(charles), id(lewis)

  lewis['balance'] = 950

  charles

  alex = {'name': 'Charles L. Dodgson', 'born': 1832, 'balance': 950}

  alex is charles # False

#+end_src

#+RESULTS:
: False

aliasing - two variables bound to the same object.

In CPython id() returns the memory address of the object - unique integer label that will not change during the life of the object.

== compares the values, *is* compares their identities

None is the most common singleton that gets tested with *is*.

  - faster than ==, because it cannot be overloaded - the compute is as simple as comparing two integer ids. but == is syntactic sugar for __eq__


#+begin_src python :session fluent :results output

  l1 = [3, [66, 55, 44], (7, 8, 9)]
  l2 = list(l1)  # makes a shallow copy - can also do l1[:]
  l1.append(100)     
  l1[1].remove(55)# l2[1] is bound to the same list as l1[1]
  print('l1:', l1)
  print('l2:', l2)
  l2[1] += [33, 22]  
  l2[2] += (10, 11)  
  print('l1:', l1)
  print('l2:', l2)

#+end_src

#+RESULTS:
: l1: [3, [66, 44], (7, 8, 9), 100]
: l2: [3, [66, 44], (7, 8, 9)]
: l1: [3, [66, 44, 33, 22], (7, 8, 9), 100]
: l2: [3, [66, 44, 33, 22], (7, 8, 9, 10, 11)]

**** Deep and Shallow Copies of Arbitrary Objects

#+begin_src python :session fluent :results output
  class Bus:
      def __init__(self, passengers = None):
          if passengers is None:
              self.passengers = []
          else:
              self.passengers = list(passengers)

      def pick(self, name):
          self.passengers.append(name)

      def drop(self, name):
          self.passengers.remove(name)
#+end_src


if we copy() bus1, it has distinct id but share the same list object
deepcopy() actually refers to another list


**** Function Parameters as References

Call by sharing - each formal parameter of the function gets a copy of each reference in the arguments.

The parameters inside the function betcome aliases of the actual arguments.

A function, thus, may change any mutable object that is passed as a parameter, but it cannot change the identity of those objects.


#+begin_src python :session fluent :results output
  def f(a,b):
      a += b
      return a

  x = 1
  y = 2
  print(f(x,y))
  print(x)

  x = [1,2]
  y = [3,4]
  print(f(x,y))
  print(x) # list is changed

  x = (1,2)
  y = (3,4)
  print(f(x,y))
  print(x)  
#+end_src

#+RESULTS:
: 3
: 1
: [1, 2, 3, 4]
: [1, 2, 3, 4]
: (1, 2, 3, 4)
: (1, 2)


If a default value is mutable object and you change it, the change will affect every future call of the function.

Unless a method is explicitly intended to mutate an object received as an argument, you should think twice before aliasing the argument object by simply assigning it to an instance variable in your class. If in doubt, make a copy. Your clients will be happier. Of course, making a copy is not free: there is a cost in CPU and memory. However, an API that causes subtle bugs is usually a bigger problem than one that is a little slower or uses more resources.


**** del and Garbage Collection

In CPython, the primary algorithm for garbage collection is reference counting. Essentially, each object keeps count of how many references point to it. As soon as that refcount reaches zero, the object is immediately destroyed: CPython calls the __del__ method on the object (if defined) and then frees the memory allocated to the object.

 del does not delete objects, but objects may be deleted as a consequence of being unreachable after del is used.
 
 Weak references to an object do not increase its reference count. Therefore, a weak reference does not prevent the target object from being garbage collected. Weak references are useful in caching applications because you don’t want the cached objects to be kept alive just because they are referenced by the cache.



#+begin_src python :session fluent :results output

#+end_src



#+begin_src python :session fluent :results output

#+end_src


** chapter seven: functions as objects

"first-class object" entity that can be: 

  * created at runtime
  * assigned to a variable or element in a data structure
  * passed as an argument to a function
  * returned as the result of a function
    

    #+begin_src python :session fluent

      def factorial(n):
          """ returns n! """
          return 1 if n < 2 else n * factorial(n-1)

      factorial.__doc__

    #+end_src

    #+RESULTS:
    :  returns n! 

**** Higher-Order Functions

#+begin_src python :session fluent

  fruits = ['strawberry', 'fig', 'apple', 'cherry', 'raspberry', 'banana']

  def reverse(word):
      return word[::-1]

  sorted(fruits, key=reverse)

#+end_src

#+RESULTS:
| banana | apple | fig | raspberry | strawberry | cherry |

A function that takes a function as an argument or returns a function as the result is a higher-order function

**** Modern Replacements for map, filter, reduce

#+begin_src python :session fluent

  list(map(factorial, range(6)))
  [factorial(n) for n in range(6)]

  list(map(factorial, filter(lambda n: n % 2, range(6))))
  [factorial(n) for n in range(6) if n % 2]

#+end_src

#+RESULTS:
| 1 | 6 | 120 |


FREDRIK LUNDH’S LAMBDA REFACTORING RECIPE
If you find a piece of code hard to understand because of a lambda, Fredrik Lundh suggests this refactoring procedure:

Write a comment explaining what the heck that lambda does.

Study the comment for a while, and think of a name that captures the essence of the comment.

Convert the lambda to a def statement, using that name.

Remove the comment.

These steps are quoted from the “Functional Programming HOWTO”, a must read.

The lambda syntax is just syntactic sugar: a lambda expression creates a function object just like the def statement. That is just one of several kinds of callable objects in Python. The following section reviews all of them.

#+begin_src python :session fluent

  sorted(fruits, key = lambda word: word[::-1])

#+end_src

#+RESULTS:
| banana | apple | fig | raspberry | strawberry | cherry |

**** Nine Flavors of Callable Objects

To determine if an object is callable, use the callable() built-in function.

- User Defined Functions
  Created with def or lambda.
  
- Built-in Functions
  Implemented in c like len
  
- Built-in Methods
  Implemented in C like dict.getattr

- Methods
  Functions defined in the body of a class.

- Classes
  When invoked, a class runs its __new__ method to create an instance, then __init__ and then instance returned to caller.

- Class instances - if a class defines a __call__ method

- Generator Functions
  Functions or methods that use the yield keyword in their body. When called, they return a generator object.

- Native Coroutine functions.
  Defined with async def.

- Async Generators.

**** User-Defined Callable Types.
  
#+begin_src python :session fluent

  import random

  class BingoCage:

      def __init__(self, items):
          self._items = list(items)
          random.shuffle(self._items)

      def pick(self):
          try:
              return self._items.pop()
          except IndexError:
              raise LookupError('pick from an empty BingoCage')

      def __call__(self):
          return self.pick()

  bingo = BingoCage(range(3))
  bingo()
#+end_src

#+RESULTS:
: 1

** chapter eight: type hints in functions

A gradual type system:

 - optional
 - does not catch type errors at runtime
 - does not enhance performance

   

#+begin_src python :session fluent
  def show_count(count: int, word: str) -> str:
      if count == 1:
          return f'1 {word}'
      count_str = str(count) if count else 'no'
      return f'{count_str} {word}s'

  show_count(99, 'bird')
#+end_src

#+RESULTS:
: 99 birds


#+begin_src python :session fluent
  from typing import Optional

  # alternate = plural: str | None = None
  def show_count(count: int, singular: str, plural: Optional[str] = None) -> str:
         if count == 1:
                return f'1 {word}'
         count_str = str(count) if count else 'no'

         if not plural:
                plural = singular + 's'

         return f'{count_str} {plural}'

  show_count(99, 'mouse', 'mice')
#+end_src

#+RESULTS:
: 99 mice

None is the best default for mutable type optional parameters.

**** types are defined by supported operations

in practice, it is most useful to consider the set of supported operations as the defining characteristic of a type. 

***** Duck Typing
The view adopted by Smalltalk—the pioneering object-oriented language—as well as Python, JavaScript, and Ruby. Objects have types, but variables (including parameters) are untyped. In practice, it doesn’t matter what the declared type of the object is, only what operations it actually supports. If I can invoke birdie.quack(), then birdie is a duck in this context. By definition, duck typing is only enforced at runtime, when operations on objects are attempted. This is more flexible than nominal typing, at the cost of allowing more errors at runtime

***** Nominal Typing
The view adopted by C++, Java, and C#, supported by annotated Python. Objects and variables have types. But objects only exist at runtime, and the type checker only cares about the source code where variables (including parameters) are annotated with type hints. If Duck is a subclass of Bird, you can assign a Duck instance to a parameter annotated as birdie: Bird. But in the body of the function, the type checker considers the call birdie.quack() illegal, because birdie is nominally a Bird, and that class does not provide the .quack() method. It doesn’t matter if the actual argument at runtime is a Duck, because nominal typing is enforced statically. The type checker doesn’t run any part of the program, it only reads the source code. This is more rigid than duck typing, with the advantage of catching some bugs earlier in a build pipeline, or even as the code is typed in an IDE.


**** types usable in annotations:

- typing.Any
- Simple types and classes
- typing.Optional and typing.Union
- Generic collections, including tuples and mappings
- Abstract base classes
- Generic iterables
- parameterized generics and TypeVar
- typing.Protocols - the key to static duck typing
- typing.Callable
- typing.NoReturn



***** Any type
assumption of the type checker:

def double(x: Any) -> Any
# ok
def double(x: object) -> object:

# type checker will reject
More general types have narrower interfaces, i.e., they support fewer operations.

But Any is a magic type that sits at the top and bottom of the type hierarcy - it simultaneously is the most general - accepting values of any type and the most specialized - supporting every possible operation (at the type checker level).


***** be liberal in what you accept, conservative in what you send

i.e. use abc.Mapping or abc.MutableMapping in parameter type hints instead of dict. 

but then return a concrete type.



#+begin_src python :session fluent
  from collections.abc import Iterable

  FromTo = Tuple[str, str]

  def zip_replace(text: str, changes: Iterable[FromTo]) -> str:
      for from_, to in changes:
          text = text.replace(from_, to)
      return text
#+end_src

#+RESULTS:

Both math.fsum and replacer.zip_replace must iterate over the entire Iterable arguments to return a result. Given an endless iterable such as the itertools.cycle generator as input, these functions would consume all memory and crash the Python process. Despite this potential danger, it is fairly common in modern Python to offer functions that accept an Iterable input even if they must process it completely to return a result. *That gives the caller the option of providing input data as a generator instead of a prebuilt sequence, potentially saving a lot of memory if the number of input items is large.*




#+begin_src python :session fluent

  from collections.abc import Sequence
  from random import shuffle
  from typing import TypeVar

  T = TypeVar('T')

  def sample(population: Sequence[T], size: int) -> list[T]:
      if size < 1:
          raise ValueError('size must be >= 1')
      result = list(population)
      shuffle(result)
      return result[:size]
#+end_src


***** bounded typevar


#+begin_src python :session fluent

  from collections import Counter
  from collections.anc import Iterable, Hashable
  from typing import TypeVar

  HashableT = TypeVar('HashableT', bound=Hashable)

  def mode(data: Iterable[HashableT]) -> HashableT:
      pairs = Counter(data).most_common(1)
      if len(pairs) == 0:
          raise ValueError('no mode for empty data')
      return pairs[0][0]

#+end_src

**** static protocols

instead of bounding as above, it is possible to define a protocol by specifying one or more methods and the type checker verifies that those methods are implemented where that protocol type is required.


for instance, sorted requires a type that implements __lt__

#+begin_src python :session fluent
  from typing import Protocol, Any

  class SupportsLessThan(Protocol):
      # body of a protocl has one or more method definitions with ... in the bodies.
      def __lt__(self, other: Any) -> bool: ...
#+end_src

#+RESULTS:


a type T is consistent with protocol P if T implements all the methods defined in P, with matching type signatures. 


#+begin_src python :session fluent
  from collections.abc import Iterahanble
  from typing import TypeVar

  LT = TypeVar('LT', bound=SupportsLessThan)

  def top(series: Iterable[LT], length: int) -> list[LT]:
      ordered = sorted(series, reverse=True)
      return ordered[:length]
#+end_src





#+begin_src python :session fluent

#+end_src


#+begin_src python :session fluent

#+end_src


#+begin_src python :session fluent

#+end_src
