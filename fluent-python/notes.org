* fluent python notes

** chapter one: the python data model
 
*** a pythonic card deck

 * collections.namedtuple() lets us construct a simple class with named attributes, no custom methods.
   
 * the underscore before the class variable name indicates that it is intended for internal used to the class. 


 #+begin_src python :results output :session fluent
   import collections

   Card = collections.namedtuple('Card', ['rank', 'suit'])

   class FrenchDeck:
       ranks = [str(n) for n in range(2,11)] + list('JQKA')
       suits  ='spades diamonds clubs hearts'.split()

       def __init__(self):
           self._cards = [Card(rank, suit) for suit in self.suits
                          for rank in self.ranks]

       def __len__(self):
           return len(self._cards)

       def __getitem__(self, position):
           return self._cards[position]

 #+end_src

 #+RESULTS:

 #+begin_src python :session fluent
   deck = FrenchDeck()
   len(deck)
 #+end_src

 #+RESULTS:
 : 52

  #+begin_src python  :session fluent
    deck[0]
  #+end_src

 #+RESULTS:
 : Card(rank='2', suit='spades')

 #+begin_src python :session fluent

   from random import choice
   choice(deck)

 #+end_src

 #+RESULTS:
 : Card(rank='J', suit='hearts')
 
 #+begin_src  python :session fluent
   deck[:3]
 #+end_src

 #+RESULTS:
 | Card | (rank= 2 suit= spades) | Card | (rank= 3 suit= spades) | Card | (rank= 4 suit= spades) |

 * Users don't need to remember special method names for standard operations.
 * Easier to benefit from the python standard library to avoid reinvention of the wheel.
   * E.g. automatically supporting slicing.

#+begin_src python :session fluent
  deck[12::13]
#+end_src

#+RESULTS:
| Card | (rank= A suit= spades) | Card | (rank= A suit= diamonds) | Card | (rank= A suit= clubs) | Card | (rank= A suit= hearts) |

#+begin_src python :session fluent
  for card in deck:
      print(card)
#+end_src

#+RESULTS:

 * By using the __getitem__ special method, our deck is automatically iterable.
 * If the collectio has no __contains__ method, the in operator does a sequential scan. - works because it is iterable.

 #+begin_src python :session fluent

   Card('Q', 'hearts') in deck

 #+end_src
 
 #+RESULTS:
 : True

  
 #+begin_src python :session fluent :results output

   suit_values = dict(spades=3, hearts=2, diamonds=1, clubs=0)

   def spades_high(card):
       rank_value  = FrenchDeck.ranks.index(card.rank)
       return rank_value * len(suit_values) + suit_values[card.suit]

   for card in sorted(deck, key=spades_high):
       print(card)

 #+end_src

 #+RESULTS:
 #+begin_example
 Card(rank='2', suit='clubs')
 Card(rank='2', suit='diamonds')
 Card(rank='2', suit='hearts')
 Card(rank='2', suit='spades')
 Card(rank='3', suit='clubs')
 Card(rank='3', suit='diamonds')
 Card(rank='3', suit='hearts')
 Card(rank='3', suit='spades')
 Card(rank='4', suit='clubs')
 Card(rank='4', suit='diamonds')
 Card(rank='4', suit='hearts')
 Card(rank='4', suit='spades')
 Card(rank='5', suit='clubs')
 Card(rank='5', suit='diamonds')
 Card(rank='5', suit='hearts')
 Card(rank='5', suit='spades')
 Card(rank='6', suit='clubs')
 Card(rank='6', suit='diamonds')
 Card(rank='6', suit='hearts')
 Card(rank='6', suit='spades')
 Card(rank='7', suit='clubs')
 Card(rank='7', suit='diamonds')
 Card(rank='7', suit='hearts')
 Card(rank='7', suit='spades')
 Card(rank='8', suit='clubs')
 Card(rank='8', suit='diamonds')
 Card(rank='8', suit='hearts')
 Card(rank='8', suit='spades')
 Card(rank='9', suit='clubs')
 Card(rank='9', suit='diamonds')
 Card(rank='9', suit='hearts')
 Card(rank='9', suit='spades')
 Card(rank='10', suit='clubs')
 Card(rank='10', suit='diamonds')
 Card(rank='10', suit='hearts')
 Card(rank='10', suit='spades')
 Card(rank='J', suit='clubs')
 Card(rank='J', suit='diamonds')
 Card(rank='J', suit='hearts')
 Card(rank='J', suit='spades')
 Card(rank='Q', suit='clubs')
 Card(rank='Q', suit='diamonds')
 Card(rank='Q', suit='hearts')
 Card(rank='Q', suit='spades')
 Card(rank='K', suit='clubs')
 Card(rank='K', suit='diamonds')
 Card(rank='K', suit='hearts')
 Card(rank='K', suit='spades')
 Card(rank='A', suit='clubs')
 Card(rank='A', suit='diamonds')
 Card(rank='A', suit='hearts')
 Card(rank='A', suit='spades')
 #+end_example


 The first thing to know about special methods is that they are meant to be called by the Python interpreter, and not by you. You don’t write my_object.__len__(). You write len(my_object) and, if my_object is an instance of a user-defined class, then Python calls the __len__ method you implemented.

 
Normally, your code should not have many direct calls to special methods. Unless you are doing a lot of metaprogramming, you should be implementing special methods more often than invoking them explicitly. The only special method that is frequently called by user code directly is __init__ to invoke the initializer of the superclass in your own __init__ implementation.

*** Evaluating Numeric Types + more


#+begin_src  python :session fluent

  import math

  class Vector:

      def __init__(self, x=0, y=0):
          self.x = x
          self.y = y

      def __repr__(self):
          # !r calls the repr() instead of str() method of the self.x, self.y
          return f'Vector({self.x!r}, {self.y!r})'

      def __abs__(self):
          return math.hypot(self.x, self.y)

      def __bool__(self):
          return bool(abs(self))

      def __add__(self, other):
          x = self.x + other.x
          y = self.y+other.y

          return Vector(x,y)

      def __mul__(self, scalar):
          return Vector(self.x * scalar, self.y * scalar)

#+end_src

#+RESULTS:

As implemented, Example 1-2 allows multiplying a Vector by a number, but not a number by a Vector, which violates the commutative property of scalar multiplication. We will fix that with the special method __rmul__ in Chapter 16.

#+begin_src  python :session fluent

  v1 = Vector(3,4)
  v2 = Vector(2,3)

  v1+v2

#+end_src

#+RESULTS:
: Vector(5, 7)

Without a custom __repr__, Python’s console would display a Vector instance <Vector object at 0x10e100070>.

Note that the f-string in our __repr__ uses !r to get the standard representation of the attributes to be displayed. This is good practice, because it shows the crucial difference between Vector(1, 2) and Vector('1', '2')—the latter would not work in the context of this example, because the constructor’s arguments should be numbers, not str.

In contrast, __str__ is called by the str() built-in and implicitly used by the print function. It should return a string suitable for display to end users.

Sometimes same string returned by __repr__ is user-friendly, and you don’t need to code __str__ because the implementation inherited from the object class calls __repr__ as a fallback. Example 5-2 is one of several examples in this book with a custom __str__.

*** Boolean value of a custom type

By default, instances of user-defined classes are considered truthy, unless either __bool__ or __len__ is implemented. Basically, bool(x) calls x.__bool__() and uses the result. If __bool__ is not implemented, Python tries to invoke x.__len__(), and if that returns zero, bool returns False. Otherwise bool returns True.


#+begin_src python :session fluent

  abs(v1) # 5.0

  bool(v1) # True
  #+end_src

#+RESULTS:
: True

** chapter two: an array of sequences

These are the main topics this chapter will cover:

    List comprehensions and the basics of generator expressions

    Using tuples as records versus using tuples as immutable lists

    Sequence unpacking and sequence patterns

    Reading from slices and writing to slices
    
    Specialized sequence types, like arrays and queues


- Container Sequences
  - Can hold items of different types, including nested containers.
    - list, tuple, collections.deque.

- Flat sequences
  - Hold items of one simple type.
    - str, bytes, array.array

      
    
    
** chapter five data class builders

Python offers a few ways to build a simple class that is just a collection of fields, with little or no extra functionality. That pattern is known as a “data class”—and dataclasses is one of the packages that supports this pattern. This chapter covers three different class builders that you may use as shortcuts to write data classes:

 #+begin_src python :results output :session fluent
   from collections import namedtuple

   Coordinate = namedtuple('Coordinate', 'lat lon')

   issubclass(Coordinate, tuple) # True

   moscow = Coordinate(55.756, 37.617)

   print(moscow)
 #+end_src

 #+RESULTS:
 : Coordinate(lat=55.756, lon=37.617)

 #+begin_src python :results output :session fluent

   import typing

   Coordinate = typing.NamedTuple('Coordinate', [('lat', float), ('lon', float)])
   # or typing.NamedTuple('Coordinate', lat=float, lon=float)

   print(typing.get_type_hints(Coordinate))
 #+end_src

 #+RESULTS:
 : {'lat': <class 'float'>, 'lon': <class 'float'>}


  #+begin_src python :results output :session fluent
    from typing import NamedTuple

    class Coordinate(NamedTuple):
        lat: float
        lon: float

        def __str__(self):
            ns = 'N' if self.lat >= 0 else 'S'
            we = 'E' if self.lon >=0 else 'W'

            return f'{abs(self.lat):.1f}{ns}, {abs(self.lon):.1f}{we}'


    moscow = Coordinate(55.756, 37.617)
    japan = Coordinate(55.756, 37.617)


    print(moscow == japan)
 #+end_src

 #+RESULTS:
 : True


 #+Begin_src  python :results output :session fluent

   from dataclasses import dataclass

   @dataclass(frozen=True) # raises exception if value assigned to field after initialization
   class Coordinate:
       lat: float
       lon: float

       def __str__(self):
           ns = 'N' if self.lat >= 0 else 'S'
           we = 'E' if self.lon >= 0 else 'W'
           return f'{abs(self.lat):.1f}°{ns}, {abs(self.lon):.1f}°{we}'
    

 #+end_src



**** Classic NamedTuples
 #+begin_src python :results output :session fluent

   from collections import namedtuple

   City = namedtuple('City', 'name country population coordinates')
   tokyo = City('Tokyo', 'JP', 36.933, (35.689722, 139.691667))

   print(tokyo.population)

   print(tokyo._asdict())
 #+end_src

 #+RESULTS:
 : 36.933
 : {'name': 'Tokyo', 'country': 'JP', 'population': 36.933, 'coordinates': (35.689722, 139.691667)}


**** Type Named Tuples

 #+begin_src python :results output :session fluent
   from typing import NamedTuple

   class Coordinate(NamedTuple):
       lat: float
       lon: float
       reference: str = 'WSG84'

 #+end_src
 

**** Variable annotation syntax:

#+begin_src python

  class DemoPlainClass:
        a: int # entry in __annotations__ but otherwise discrded, no attr a is created
        b: float = 1.1 # b is saved as an annotation and becomes attribute with value 1.1
        c = 'spam' # plain old attribute, not an annotation
        
  DemoPlainClass.__annotations__
        """

  When DPC is built with type NamedTuple, a is also an instance attribute
  """

#+end_src

**** More about @dataclass

#+begin_src python :session fluent :results output

  """

    @dataclass(*, init=True, repr=True, eq=True, order=False,
                unsafe_hash=False, frozen=False)
    """

  from dataclasses import dataclass, field
  from typing import ClassVar

  @dataclass
  class ClubMember:
      name: str
      guests: list[str] = field(default_factory=list) # ensures that each instance gets its own
      # blank list


  @dataclass                                                          
  class HackerClubMember(ClubMember):
      #all_handles = set() # not type cheker satisfactory
      all_handles: ClassVar[set[str]] = set()
      handle: str = ''

      def __post_init__(self):
          cls = self.__class__
          if self.handle == '':
              self.handle = self.name.split()[0]

          if self.handle in cls.all_handles:
              msg = f'handle {self.handle!r} already exists.'
              raise ValueError(msg)

          cls.all_handles.add(self.handle)


  leo  = HackerClubMember('Leo Jones')
  leo2 = HackerClubMember('Leo Rones', handle='leo2')
#+end_src

#+RESULTS:
: HackerClubMember(name='Leo Jones', guests=[], handle='Leo')
: HackerClubMember(name='Leo Rones', guests=[], handle='leo2')

Sometimes you may need to pass arguments to __init__ that are not instance fields. Such arguments are called init-only variables by the dataclasses documentation. To declare an argument like that, the dataclasses module provides the pseudotype InitVar, which uses the same syntax of typing.ClassVar. The example given in the documentation is a data class that has a field initialized from a database, and the database object must be passed to the constructor.

#+begin_src python

  @dataclass
  class C:
      i: int
      j: int
      database: InitVar[DatabaseType] = None

#+end_src


Note how the database attribute is declared. InitVar will prevent @dataclass from treating database as a regular field. It will not be set as an instance attribute, and the dataclasses.fields function will not list it. However, database will be one of the arguments that the generated __init__ will accept, and it will be also passed to __post_init__. If you write that method, you must add a corresponding argument to the method signature, as shown in Example 5-18.


**** Dublin Core Resource Record

#+begin_src  python :results output :session fluent

  from dataclasses import dataclass, field
  from typing import Optional
  from enum import Enum, auto
  from datetime import date

  class ResourceType(Enum):
      BOOK = auto()
      EBOOK = auto()
      VIDEO = auto()

  @dataclass
  class Resource:
      identifier: str
      title: str = '<untitled>'
      creators: list[str] = field(default_factory=list)
      date: Optional[date] = None
      description: str = ''
      language: str = ''
      subjects: list[str] = field(default_factory) = list

#+end_src
