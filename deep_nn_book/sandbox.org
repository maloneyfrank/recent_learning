* Neural Networks and Deep Learning Study

** MNIST Example w/ intro to backprop

Begin by importing necessary packages and network from scratch_mnist.py

#+begin_src python :results output :session sandbox
  from sklearn.datasets import fetch_openml

  import numpy as np

  mnist = fetch_openml('mnist_784')
 #+end_src

#+RESULTS:


Now we ensure the data is in the proper format to be fed into the network. 
#+begin_src python :results output :session sandbox
  print(f"Shape of mnist input data: {np.shape(mnist.data)}")
  print(f"Shape of mnist target data: {np.shape(mnist.target)}")
#+end_src 

#+RESULTS:
: Shape of mnist input data: (70000, 784)
: Shape of mnist target data: (70000,)

#+begin_src python :results output :session sandbox
  def data_wrapper(data, target):
          training_cut = 50000
          validation_cut = 60000

          tr_d, va_d, te_d = ((data[:training_cut], target[:training_cut]),
                              (data[training_cut: validation_cut], target[training_cut:validation_cut]),
                              (data[validation_cut:], target[validation_cut:]))

          training_inputs = [np.reshape(x, (784,1)) for x in tr_d[0]]
          training_results = [vectorized_result(y) for y in tr_d[1]]
          training_data = zip(training_inputs, training_results)
          validation_inputs = [np.reshape(x, (784, 1)) for x in va_d[0]]
          validation_data = zip(validation_inputs, va_d[1])
          test_inputs = [np.reshape(x, (784, 1)) for x in te_d[0]]
          test_data = zip(test_inputs, te_d[1])
          return (list(training_data), list(validation_data), list(test_data))


  def vectorized_result(j):
          """Return a 10-dimensional unit vector with a 1.0 in the jth
          position and zeroes elsewhere.  This is used to convert a digit
          (0...9) into a corresponding desired output from the neural
          network."""
          e = np.zeros((10, 1))
          e[j] = 1.0
          return e


  training_data, validation_data, test_data = data_wrapper(mnist.data.to_numpy(), mnist.target.to_numpy().astype(int)
  )
#+end_src

#+RESULTS:



Now let's actually use and call the NET!
#+begin_src python :results output :session sandbox

  import importlib
  network = importlib.import_module('scratch_mnist')
 

  net = network.Network([784,30,10])
  net.SGD(training_data, 30, 10, 3.0, test_data=test_data)
#+end_src

#+RESULTS:

#+begin_src python :results output :session sandbox
#+end_src

#+RESULTS:
: [5 0 4 ... 4 5 6]


